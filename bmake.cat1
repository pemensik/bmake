MAKE(1)                     NetBSD Reference Manual                    MAKE(1)

NNAAMMEE
     bbmmaakkee - maintain program dependencies

SSYYNNOOPPSSIISS
     bbmmaakkee [--BBeeiikkNNnnqqrrssttWW] [--DD _v_a_r_i_a_b_l_e] [--dd _f_l_a_g_s] [--ff _m_a_k_e_f_i_l_e]
           [--II _d_i_r_e_c_t_o_r_y] [--jj _m_a_x___j_o_b_s] [--JJ _p_r_i_v_a_t_e] [--mm _d_i_r_e_c_t_o_r_y] [--TT _f_i_l_e]
           [--VV _v_a_r_i_a_b_l_e] [_v_a_r_i_a_b_l_e_=_v_a_l_u_e] [_t_a_r_g_e_t _._._.]

DDEESSCCRRIIPPTTIIOONN
     bbmmaakkee is a program designed to simplify the maintenance of other pro-
     grams.  Its input is a list of specifications as to the files upon which
     programs and other files depend.  If the file `_m_a_k_e_f_i_l_e' exists, it is
     read for this list of specifications.  If it does not exist, the file
     `_M_a_k_e_f_i_l_e' is read.  If the file `_._d_e_p_e_n_d' exists, it is read (see
     mkdep(1)).

     This manual page is intended as a reference document only.  For a more
     thorough description of bbmmaakkee and makefiles, please refer to _M_a_k_e _- _A
     _T_u_t_o_r_i_a_l.

     The options are as follows:

     --BB      Try to be backwards compatible by executing a single shell per
             command and by executing the commands to make the sources of a
             dependency line in sequence.

     --DD _v_a_r_i_a_b_l_e
             Define _v_a_r_i_a_b_l_e to be 1, in the global context.

     --dd _f_l_a_g_s
             Turn on debugging, and specify which portions of bbmmaakkee are to
             print debugging information.  _F_l_a_g_s is one or more of the follow-
             ing:

             _A       Print all possible debugging information; equivalent to
                     specifying all of the debugging flags.

             _a       Print debugging information about archive searching and
                     caching.

             _c       Print debugging information about conditional evaluation.

             _d       Print debugging information about directory searching and
                     caching.

             _g_1      Print the input graph before making anything.

             _g_2      Print the input graph after making everything, or before
                     exiting on error.

             _j       Print debugging information about running multiple
                     shells.

             _m       Print debugging information about making targets, includ-
                     ing modification dates.

             _s       Print debugging information about suffix-transformation
                     rules.

             _t       Print debugging information about target list mainte-
                     nance.

             _v       Print debugging information about variable assignment.

             _x       Run shell commands with --xx so the actual commands are
                     printed as they are executed.

     --ee      Specify that environment variables override macro assignments
             within makefiles.

     --ff _m_a_k_e_f_i_l_e
             Specify a makefile to read instead of the default `_m_a_k_e_f_i_l_e' and
             If _m_a_k_e_f_i_l_e is `--', standard input is read.  Multiple makefile's
             may be specified, and are read in the order specified.

     --II _d_i_r_e_c_t_o_r_y
             Specify a directory in which to search for makefiles and included
             makefiles.  The system makefile directory (or directories, see
             the --mm option) is automatically included as part of this list.

     --ii      Ignore non-zero exit of shell commands in the makefile.  Equiva-
             lent to specifying `--' before each command line in the makefile.

     --JJ _p_r_i_v_a_t_e
             This option should _n_o_t be specified by the user.

             When the _j option is in use in a recursive build, this option is
             passed by a make to child makes to allow all the make processes
             in the build to cooperate to avoid overloading the system.

     --jj _m_a_x___j_o_b_s
             Specify the maximum number of jobs that bbmmaakkee may have running at
             any one time.  Turns compatibility mode off, unless the _B flag is
             also specified.

     --kk      Continue processing after errors are encountered, but only on
             those targets that do not depend on the target whose creation
             caused the error.

     --mm _d_i_r_e_c_t_o_r_y
             Specify a directory in which to search for sys.mk and makefiles
             included via the <...> style.  Multiple directories can be added
             to form a search path.  This path will override the default sys-
             tem include path: /usr/share/mk.  Furthermore the system include
             path will be appended to the search path used for "..."-style in-
             clusions (see the --II option).

     --nn      Display the commands that would have been executed, but do not
             actually execute them unless the target depends on the .MAKE spe-
             cial source (see below).

     --NN      Display the commands which would have been executed, but do not
             actually execute any of them; useful for debugging top-level
             makefiles without descending into subdirectories.

     --qq      Do not execute any commands, but exit 0 if the specified targets
             are up-to-date and 1, otherwise.

     --rr      Do not use the built-in rules specified in the system makefile.

     --ss      Do not echo any commands as they are executed.  Equivalent to
             specifying `@@' before each command line in the makefile.

     --TT _t_r_a_c_e_f_i_l_e
             When used with the --jj flag, append a trace record to _t_r_a_c_e_f_i_l_e
             for each job started and completed.

     --tt      Rather than re-building a target as specified in the makefile,
             create it or update its modification time to make it appear up-
             to-date.

     --VV _v_a_r_i_a_b_l_e
             Print bbmmaakkee's idea of the value of _v_a_r_i_a_b_l_e, in the global con-
             text.  Do not build any targets.  Multiple instances of this op-
             tion may be specified; the variables will be printed one per
             line, with a blank line for each null or undefined variable.

     --WW      Treat any warnings during makefile parsing as errors.

     _v_a_r_i_a_b_l_e_=_v_a_l_u_e
             Set the value of the variable _v_a_r_i_a_b_l_e to _v_a_l_u_e.

     There are seven different types of lines in a makefile: file dependency
     specifications, shell commands, variable assignments, include statements,
     conditional directives, for loops, and comments.

     In general, lines may be continued from one line to the next by ending
     them with a backslash (`\').  The trailing newline character and initial
     whitespace on the following line are compressed into a single space.

FFIILLEE DDEEPPEENNDDEENNCCYY SSPPEECCIIFFIICCAATTIIOONNSS
     Dependency lines consist of one or more targets, an operator, and zero or
     more sources.  This creates a relationship where the targets ``depend''
     on the sources and are usually created from them.  The exact relationship
     between the target and the source is determined by the operator that sep-
     arates them.  The three operators are as follows:

     ::     A target is considered out-of-date if its modification time is less
           than those of any of its sources.  Sources for a target accumulate
           over dependency lines when this operator is used.  The target is
           removed if bbmmaakkee is interrupted.

     !!     Targets are always re-created, but not until all sources have been
           examined and re-created as necessary.  Sources for a target accumu-
           late over dependency lines when this operator is used.  The target
           is removed if bbmmaakkee is interrupted.

     ::::    If no sources are specified, the target is always re-created.  Oth-
           erwise, a target is considered out-of-date if any of its sources
           has been modified more recently than the target.  Sources for a
           target do not accumulate over dependency lines when this operator
           is used.  The target will not be removed if bbmmaakkee is interrupted.

     Targets and sources may contain the shell wildcard values `?', `*', `[]'
     and `{}'.  The values `?', `*' and `[]' may only be used as part of the
     final component of the target or source, and must be used to describe ex-
     isting files.  The value `{}' need not necessarily be used to describe
     existing files.  Expansion is in directory order, not alphabetically as
     done in the shell.

SSHHEELLLL CCOOMMMMAANNDDSS
     Each target may have associated with it a series of shell commands, nor-
     mally used to create the target.  Each of the commands in this script
     _m_u_s_t be preceded by a tab.  While any target may appear on a dependency
     line, only one of these dependencies may be followed by a creation
     script, unless the `::::' operator is used.

     If the first or first two characters of the command line are `@@' and/or
     `--', the command is treated specially.  A `@@' causes the command not to
     be echoed before it is executed.  A `--' causes any non-zero exit status
     of the command line to be ignored.

VVAARRIIAABBLLEE AASSSSIIGGNNMMEENNTTSS
     Variables in make are much like variables in the shell, and, by tradi-
     tion, consist of all upper-case letters.  The five operators that can be
     used to assign values to variables are as follows:

     ==       Assign the value to the variable.  Any previous value is overrid-
             den.

     ++==      Append the value to the current value of the variable.

     ??==      Assign the value to the variable if it is not already defined.

     ::==      Assign with expansion, i.e. expand the value before assigning it
             to the variable.  Normally, expansion is not done until the vari-
             able is referenced.

     !!==      Expand the value and pass it to the shell for execution and as-
             sign the result to the variable.  Any newlines in the result are
             replaced with spaces.

     Any white-space before the assigned _v_a_l_u_e is removed; if the value is be-
     ing appended, a single space is inserted between the previous contents of
     the variable and the appended value.

     Variables are expanded by surrounding the variable name with either curly
     braces (`{}') or parentheses (`()') and preceding it with a dollar sign
     (`$').  If the variable name contains only a single letter, the surround-
     ing braces or parentheses are not required.  This shorter form is not
     recommended.

     Variable substitution occurs at two distinct times, depending on where
     the variable is being used.  Variables in dependency lines are expanded
     as the line is read.  Variables in shell commands are expanded when the
     shell command is executed.

     The four different classes of variables (in order of increasing prece-
     dence) are:

     Environment variables
             Variables defined as part of bbmmaakkee's environment.

     Global variables
             Variables defined in the makefile or in included makefiles.

     Command line variables
             Variables defined as part of the command line.

     Local variables
             Variables that are defined specific to a certain target.  The
             seven local variables are as follows:

             _._A_L_L_S_R_C   The list of all sources for this target; also known as
                       `_>'.

             _._A_R_C_H_I_V_E  The name of the archive file.

             _._I_M_P_S_R_C   The name/path of the source from which the target is to
                       be transformed (the ``implied'' source); also known as
                       `_<'.

             _._M_E_M_B_E_R   The name of the archive member.

             _._O_O_D_A_T_E   The list of sources for this target that were deemed
                       out-of-date; also known as `_?'.

             _._P_R_E_F_I_X   The file prefix of the file, containing only the file
                       portion, no suffix or preceding directory components;
                       also known as `_*'.

             _._T_A_R_G_E_T   The name of the target; also known as `_@'.

             The shorter forms `_@', `_?', `_<', `_>', and `_*' are permitted for
             backward compatibility with historical makefiles and are not rec-
             ommended.  The six variables `_@_F', `_@_D', `_<_F', `_<_D', `_*_F', and
             `_*_D' are permitted for compatibility with AT&T System V UNIX
             makefiles and are not recommended.

             Four of the local variables may be used in sources on dependency
             lines because they expand to the proper value for each target on
             the line.  These variables are `_._T_A_R_G_E_T', `_._P_R_E_F_I_X', `_._A_R_C_H_I_V_E',
             and `_._M_E_M_B_E_R'.

     In addition, bbmmaakkee sets or knows about the following variables:

     _$               A single dollar sign `$', i.e.  `$$' expands to a single
                     dollar sign.  (_a_r_g_v_[_0_])

     _._A_L_L_T_A_R_G_E_T_S     The list of all targets encountered in the Makefile.  If
                     evaluated during Makefile parsing, lists only those tar-
                     gets encountered thus far.

     _._C_U_R_D_I_R         A path to the directory where bbmmaakkee was executed.

     _._M_A_K_E           The name that bbmmaakkee was executed with.

     MAKEFLAGS       The environment variable `MAKEFLAGS' may contain anything
                     that may be specified on bbmmaakkee's command line.  Anything
                     specified on bbmmaakkee's command line is appended to the
                     `MAKEFLAGS' variable which is then entered into the envi-
                     ronment for all programs which bbmmaakkee executes.

     _._M_A_K_E_O_V_E_R_R_I_D_E_S  This variable is used to record the names of variables
                     assigned to on the command line, so that they may be ex-
                     ported as part of `MAKEFLAGS'.  This behaviour can be
                     disabled by assigning an empty value to `_._M_A_K_E_O_V_E_R_R_I_D_E_S'
                     within a makefile.  Extra variables can be exported from
                     a makefile by appending their names to `_._M_A_K_E_O_V_E_R_R_I_D_E_S'.
                     `MAKEFLAGS' is re-exported whenever `_._M_A_K_E_O_V_E_R_R_I_D_E_S' is
                     modified.

     _M_A_K_E___P_R_I_N_T___V_A_R___O_N___E_R_R_O_R
                     When bbmmaakkee stops due to an error, it prints its name and
                     the value of `_._C_U_R_D_I_R' as well as the value of any vari-
                     ables named in `_M_A_K_E___P_R_I_N_T___V_A_R___O_N___E_R_R_O_R'.

     _._n_e_w_l_i_n_e        This variable is simply assigned a newline character as
                     its value.  This allows expansions using the :@ modifier
                     to put a newline between iterations of the loop rather
                     than a space.  For example, the printing of
                     `_M_A_K_E___P_R_I_N_T___V_A_R___O_N___E_R_R_O_R' could be done as
                     ${MAKE_PRINT_VAR_ON_ERROR:@v@$v='${$v}'${.newline}@}.

     _._O_B_J_D_I_R         A path to the directory where the targets are built.

     _._P_A_R_S_E_D_I_R       A path to the directory of the current `_M_a_k_e_f_i_l_e' being
                     parsed.

     _._P_A_R_S_E_F_I_L_E      The basename of the current `_M_a_k_e_f_i_l_e' being parsed.
                     This variable and `_._P_A_R_S_E_D_I_R' are both set only while the
                     `_M_a_k_e_f_i_l_e_s' are being parsed.

     _._P_A_T_H           A variable that represents the list of directories that
                     bbmmaakkee will search for files.  The search list should be
                     updated using the target `_._P_A_T_H' rather than the vari-
                     able.

     PWD             Alternate path to the current directory.  bbmmaakkee normally
                     sets `_._C_U_R_D_I_R' to the canonical path given by getcwd(3).
                     However, if the environment variable `PWD' is set and
                     gives a path to the current directory, then bbmmaakkee sets
                     `_._C_U_R_D_I_R' to the value of `PWD' instead.  This behaviour
                     is disabled if `MAKEOBJDIRPREFIX' is set.  `PWD' is set
                     to the value of `_._O_B_J_D_I_R' for all programs which bbmmaakkee
                     executes.

     Variable expansion may be modified to select or modify each word of the
     variable (where a ``word'' is white-space delimited sequence of charac-
     ters).  The general format of a variable expansion is as follows:

           {variable[:modifier[:...]]}

     Each modifier begins with a colon and one of the following special char-
     acters.  The colon may be escaped with a backslash (`\').

     EE    Replaces each word in the variable with its suffix.

     HH    Replaces each word in the variable with everything but the last com-
          ponent.

     MM_p_a_t_t_e_r_n
          Select only those words that match the rest of the modifier.  The
          standard shell wildcard characters (`*', `?', and `[]') may be used.
          The wildcard characters may be escaped with a backslash (`\').

     NN_p_a_t_t_e_r_n
          This is identical to `MM', but selects all words which do not match
          the rest of the modifier.

     OO    Order every word in variable alphabetically.

     QQ    Quotes every shell meta-character in the variable, so that it can be
          passed safely through recursive invocations of bbmmaakkee.

     RR    Replaces each word in the variable with everything but its suffix.

     ttll   Converts variable to lower-case letters.

     ttuu   Converts variable to upper-case letters.

     SS/_o_l_d___s_t_r_i_n_g/_n_e_w___s_t_r_i_n_g/[11gg]
          Modify the first occurrence of _o_l_d___s_t_r_i_n_g in the variable's value,
          replacing it with _n_e_w___s_t_r_i_n_g.  If a `g' is appended to the last
          slash of the pattern, all occurrences in each word are replaced.  If
          a `1' is appended to the last slash of the pattern, only the first
          word is affected.  If _o_l_d___s_t_r_i_n_g begins with a caret (`^'),
          _o_l_d___s_t_r_i_n_g is anchored at the beginning of each word.  If _o_l_d___s_t_r_i_n_g
          ends with a dollar sign (`$'), it is anchored at the end of each
          word.  Inside _n_e_w___s_t_r_i_n_g, an ampersand (`&') is replaced by
          _o_l_d___s_t_r_i_n_g (without any `^' or `$').  Any character may be used as a
          delimiter for the parts of the modifier string.  The anchoring, am-
          persand and delimiter characters may be escaped with a backslash
          (`\').

          Variable expansion occurs in the normal fashion inside both
          _o_l_d___s_t_r_i_n_g and _n_e_w___s_t_r_i_n_g with the single exception that a backslash
          is used to prevent the expansion of a dollar sign (`$'), not a pre-
          ceding dollar sign as is usual.

     CC/_p_a_t_t_e_r_n/_r_e_p_l_a_c_e_m_e_n_t/[11gg]
          The CC modifier is just like the SS modifier except that the old and
          new strings, instead of being simple strings, are a regular expres-
          sion (see regex(3)) and an ed(1)-style replacement string.  Normal-
          ly, the first occurrence of the pattern in each word of the value is
          changed.  The `1' modifier causes the substitution to apply to at
          most one word; the `g' modifier causes the substitution to apply to
          as many instances of the search pattern as occur in the word or
          words it is found in.  Note that `1' and `g' are orthogonal; the
          former specifies whether multiple words are potentially affected,
          the latter whether multiple substitutions can potentially occur
          within each affected word.

     TT    Replaces each word in the variable with its last component.

     uu    Remove adjacent duplicate words (like uniq(1)).

     ?? _t_r_u_e___s_t_r_i_n_g : _f_a_l_s_e___s_t_r_i_n_g
          If the variable evaluates to true, return as its value the
          _t_r_u_e___s_t_r_i_n_g, otherwise return the _f_a_l_s_e___s_t_r_i_n_g.

     _o_l_d___s_t_r_i_n_g_=_n_e_w___s_t_r_i_n_g
          This is the AT&T System V UNIX style variable substitution.  It must
          be the last modifier specified.  If _o_l_d___s_t_r_i_n_g or _n_e_w___s_t_r_i_n_g do not
          contain the pattern matching character _% then it is assumed that
          they are anchored at the end of each word, so only suffixes or en-
          tire words may be replaced.  Otherwise _% is the substring of
          _o_l_d___s_t_r_i_n_g to be replaced in _n_e_w___s_t_r_i_n_g.

     @@ _t_e_m_p @@ _s_t_r_i_n_g @@
          This is the loop expansion mechanism from the OSF Development Envi-
          ronment (ODE) make.  Unlike ..ffoorr loops expansion occurs at the time
          of reference.  Assign _t_e_m_p to each word in the variable and evaluate
          _s_t_r_i_n_g.  The ODE convention is that _t_e_m_p should start and end with a
          period.  For example.
                ${LINKS:@.LINK.@${LN} ${TARGET} ${.LINK.}@}

     UU _n_e_w_v_a_l
          If the variable is undefined _n_e_w_v_a_l is the value.  If the variable
          is defined, the existing value is returned.  This is another ODE
          make feature.  It is handy for setting per-target CFLAGS for in-
          stance:
                ${_${.TARGET:T}_CFLAGS:U${DEF_CFLAGS}}
          If a value is only required if the variable is undefined, use:
                ${VAR:D:Unewval}

     DD _n_e_w_v_a_l
          If the variable is defined _n_e_w_v_a_l is the value.

     LL    The name of the variable is the value.

     PP    The path of the node which has the same name as the variable is the
          value.  If no such node exists or its path is null, then the name of
          the variable is used.

     !! _c_m_d !!
          The output of running _c_m_d is the value.

     sshh   If the variable is non-empty it is run as a command and the output
          becomes the new value.

     ::== _s_t_r
          The variable is assigned the value _s_t_r after substitution.  This
          modifier and its variations are useful in obscure situations such as
          wanting to apply modifiers to ..ffoorr loop iteration variables which
          won't work due to the way ..ffoorr loops are implemented.  These assign-
          ment modifiers always expand to nothing, so if appearing in a rule
          line by themselves should be preceded with something to keep bbmmaakkee
          happy.  As in:

          use_foo: .USE
          .for i in ${.TARGET} ${.TARGET:R}.gz
                  @: ${t::=$i}
                  @echo t:R:T=${t:R:T}
          .endfor

          The double :: helps avoid false matches with the AT&T System V UNIX
          style == modifier and since substitution always occurs the ::== form is
          vaguely appropriate.

     ::??== _s_t_r
          As for ::== but only if the variable does not already have a value.

     ::++== _s_t_r
          Append _s_t_r to the variable.

     ::!!== _c_m_d
          Assign the output of _c_m_d to the variable.

IINNCCLLUUDDEE SSTTAATTEEMMEENNTTSS,, CCOONNDDIITTIIOONNAALLSS AANNDD FFOORR LLOOOOPPSS
     Makefile inclusion, conditional structures and for loops  reminiscent of
     the C programming language are provided in bbmmaakkee.  All such structures
     are identified by a line beginning with a single dot (`.') character.
     Files are included with either ..iinncclluuddee <_f_i_l_e> or ..iinncclluuddee "_f_i_l_e".  Vari-
     ables between the angle brackets or double quotes are expanded to form
     the file name.  If angle brackets are used, the included makefile is ex-
     pected to be in the system makefile directory.  If double quotes are
     used, the including makefile's directory and any directories specified
     using the --II option are searched before the system makefile directory.
     For compatibility with other versions of bbmmaakkee `include file ...' is also
     accepted.  If the include statement is written as ..--iinncclluuddee or as
     ..ssiinncclluuddee then errors locating and/or opening include files are ignored.

     Conditional expressions are also preceded by a single dot as the first
     character of a line.  The possible conditionals are as follows:

     ..uunnddeeff _v_a_r_i_a_b_l_e
             Un-define the specified global variable.  Only global variables
             may be un-defined.

     ..iiff [!]_e_x_p_r_e_s_s_i_o_n [_o_p_e_r_a_t_o_r _e_x_p_r_e_s_s_i_o_n _._._.]
             Test the value of an expression.

     ..iiffddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e _._._.]
             Test the value of a variable.

     ..iiffnnddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e _._._.]
             Test the value of a variable.

     ..iiffmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t _._._.]
             Test the target being built.

     ..iiffnnmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t _._._.]
             Test the target being built.

     ..eellssee   Reverse the sense of the last conditional.

     ..eelliiff [!]_e_x_p_r_e_s_s_i_o_n [_o_p_e_r_a_t_o_r _e_x_p_r_e_s_s_i_o_n _._._.]
             A combination of `..eellssee' followed by `..iiff'.

     ..eelliiffddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e _._._.]
             A combination of `..eellssee' followed by `..iiffddeeff'.

     ..eelliiffnnddeeff [!]_v_a_r_i_a_b_l_e [_o_p_e_r_a_t_o_r _v_a_r_i_a_b_l_e _._._.]
             A combination of `..eellssee' followed by `..iiffnnddeeff'.

     ..eelliiffmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t _._._.]
             A combination of `..eellssee' followed by `..iiffmmaakkee'.

     ..eelliiffnnmmaakkee [!]_t_a_r_g_e_t [_o_p_e_r_a_t_o_r _t_a_r_g_e_t _._._.]
             A combination of `..eellssee' followed by `..iiffnnmmaakkee'.

     ..eennddiiff  End the body of the conditional.

     The _o_p_e_r_a_t_o_r may be any one of the following:

     ||||     Logical OR.

     &&&&     Logical AND; of higher precedence than ``||''.

     As in C, bbmmaakkee will only evaluate a conditional as far as is necessary to
     determine its value.  Parentheses may be used to change the order of
     evaluation.  The boolean operator `!!' may be used to logically negate an
     entire conditional.  It is of higher precedence than `&&&&'.

     The value of _e_x_p_r_e_s_s_i_o_n may be any of the following:

     ddeeffiinneedd  Takes a variable name as an argument and evaluates to true if
              the variable has been defined.

     mmaakkee     Takes a target name as an argument and evaluates to true if the
              target was specified as part of bbmmaakkee's command line or was de-
              clared the default target (either implicitly or explicitly, see
              _._M_A_I_N) before the line containing the conditional.

     eemmppttyy    Takes a variable, with possible modifiers, and evaluates to true
              if the expansion of the variable would result in an empty
              string.

     eexxiissttss   Takes a file name as an argument and evaluates to true if the
              file exists.  The file is searched for on the system search path
              (see _._P_A_T_H).

     ttaarrggeett   Takes a target name as an argument and evaluates to true if the
              target has been defined.

     ccoommmmaannddss
              Takes a target name as an argument and evaluates to true if the
              target has been defined and has commands associated with it.

     _E_x_p_r_e_s_s_i_o_n may also be an arithmetic or string comparison.  Variable ex-
     pansion is performed on both sides of the comparison, after which the in-
     tegral values are compared.  A value is interpreted as hexadecimal if it
     is preceded by 0x, otherwise it is decimal; octal numbers are not sup-
     ported.  The standard C relational operators are all supported.  If after
     variable expansion, either the left or right hand side of a `====' or `!!=='
     operator is not an integral value, then string comparison is performed
     between the expanded variables.  If no relational operator is given, it
     is assumed that the expanded variable is being compared against 0.

     When bbmmaakkee is evaluating one of these conditional expression, and it en-
     counters a word it doesn't recognize, either the ``make'' or ``defined''
     expression is applied to it, depending on the form of the conditional.
     If the form is `..iiffddeeff' or `..iiffnnddeeff', the ``defined'' expression is ap-
     plied.  Similarly, if the form is `..iiffmmaakkee' or `..iiffnnmmaakkee, tthhee ````mmaakkee'''''
     expression is applied.

     If the conditional evaluates to true the parsing of the makefile contin-
     ues as before.  If it evaluates to false, the following lines are
     skipped.  In both cases this continues until a `..eellssee' or `..eennddiiff' is
     found.

     For loops are typically used to apply a set of rules to a list of files.
     The syntax of a for loop is:

     ..ffoorr _v_a_r_i_a_b_l_e [_v_a_r_i_a_b_l_e _._._.] iinn _e_x_p_r_e_s_s_i_o_n
             <make-rules>
     ..eennddffoorr

     After the for eexxpprreessssiioonn is evaluated, it is split into words.  On each
     iteration of the loop, one word is taken and assigned to each vvaarriiaabbllee,
     in order, and these vvaarriiaabblleess are substituted into the mmaakkee--rruulleess inside
     the body of the for loop.  The number of words must come out even; that
     is, if there are three iteration variables, the number of words provided
     must be a multiple of three.

CCOOMMMMEENNTTSS
     Comments begin with a hash (`#') character, anywhere but in a shell com-
     mand line, and continue to the end of the line.

SSPPEECCIIAALL SSOOUURRCCEESS
     ..IIGGNNOORREE   Ignore any errors from the commands associated with this tar-
               get, exactly as if they all were preceded by a dash (`-').

     ..MMAADDEE     Mark all sources of this target as being up-to-date.

     ..MMAAKKEE     Execute the commands associated with this target even if the --nn
               or --tt options were specified.  Normally used to mark recursive
               bbmmaakkee's.

     ..NNOOTTMMAAIINN  Normally bbmmaakkee selects the first target it encounters as the
               default target to be built if no target was specified.  This
               source prevents this target from being selected.

     ..OOPPTTIIOONNAALL
               If a target is marked with this attribute and bbmmaakkee can't fig-
               ure out how to create it, it will ignore this fact and assume
               the file isn't needed or already exists.

     ..PPRREECCIIOOUUSS
               When bbmmaakkee is interrupted, it removes any partially made tar-
               gets.  This source prevents the target from being removed.

     ..SSIILLEENNTT   Do not echo any of the commands associated with this target,
               exactly as if they all were preceded by an at sign (`@').

     ..UUSSEE      Turn the target into bbmmaakkee's version of a macro.  When the tar-
               get is used as a source for another target, the other target
               acquires the commands, sources, and attributes (except for
               ..UUSSEE) of the source.  If the target already has commands, the
               ..UUSSEE target's commands are appended to them.

     ..UUSSEEBBEEFFOORREE
               Exactly like ..UUSSEE, but prepend the ..UUSSEEBBEEFFOORREE target commands
               to the target.

     ..WWAAIITT     If special ..WWAAIITT source is appears in a dependency line, the
               sources that precede it are made before the sources that suc-
               ceed it in the line.  Loops are not being detected and targets
               that form loops will be silently ignored.

SSPPEECCIIAALL TTAARRGGEETTSS
     Special targets may not be included with other targets, i.e. they must be
     the only target specified.

     ..BBEEGGIINN   Any command lines attached to this target are executed before
              anything else is done.

     ..DDEEFFAAUULLTT
              This is sort of a ..UUSSEE rule for any target (that was used only
              as a source) that bbmmaakkee can't figure out any other way to cre-
              ate.  Only the shell script is used.  The ..IIMMPPSSRRCC variable of a
              target that inherits ..DDEEFFAAUULLTT's commands is set to the target's
              own name.

     ..EENNDD     Any command lines attached to this target are executed after ev-
              erything else is done.

     ..IIGGNNOORREE  Mark each of the sources with the ..IIGGNNOORREE attribute.  If no
              sources are specified, this is the equivalent of specifying the
              --ii option.

     ..IINNTTEERRRRUUPPTT
              If bbmmaakkee is interrupted, the commands for this target will be
              executed.

     ..MMAAIINN    If no target is specified when bbmmaakkee is invoked, this target
              will be built.

     ..MMAAKKEEFFLLAAGGSS
              This target provides a way to specify flags for bbmmaakkee when the
              makefile is used.  The flags are as if typed to the shell,
              though the --ff option will have no effect.

     ..NNOOPPAATTHH  Apply the ..NNOOPPAATTHH attribute to any specified sources.  Targets
              with this attribute are not searched for in the directories
              specified by ..PPAATTHH.

     ..NNOOTTPPAARRAALLLLEELL
              Disable parallel mode.

     ..NNOO__PPAARRAALLLLEELL
              Same as above, for compatibility with other pmake variants.

     ..OORRDDEERR   The named targets are made in sequence.

     ..PPAATTHH    The sources are directories which are to be searched for files
              not found in the current directory.  If no sources are speci-
              fied, any previously specified directories are deleted.  If the
              source is the special ..DDOOTTLLAASSTT target, then the current working
              directory is searched last.

     ..PPHHOONNYY   Apply the ..PPHHOONNYY attribute to any specified sources.  Targets
              with this attribute do not correspond to actual files; they are
              always considered to be out of date, and will not be created
              with the --tt option.

     ..PPRREECCIIOOUUSS
              Apply the ..PPRREECCIIOOUUSS attribute to any specified sources.  If no
              sources are specified, the ..PPRREECCIIOOUUSS attribute is applied to ev-
              ery target in the file.

     ..SSIILLEENNTT  Apply the ..SSIILLEENNTT attribute to any specified sources.  If no
              sources are specified, the ..SSIILLEENNTT attribute is applied to every
              command in the file.

     ..SSUUFFFFIIXXEESS
              Each source specifies a suffix to bbmmaakkee.  If no sources are
              specified, any previous specified suffixes are deleted.

EENNVVIIRROONNMMEENNTT
     bbmmaakkee utilizes the following environment variables, if they exist:
     MACHINE, MACHINE_ARCH, MAKE, MAKEFLAGS, MAKEOBJDIR, MAKEOBJDIRPREFIX, and
     PWD.

     If MAKEOBJDIRPREFIX is set, then bbmmaakkee will chdir(2) to ${MAKEOBJDIRPRE-
     FIX}${.CURDIR} if it exists.  Otherwise if MAKEOBJDIR and the named di-
     rectory exists bbmmaakkee will chdir(2) to it.  These actions are taken before
     any makefiles are read which is why they need to be set in the environ-
     ment.

FFIILLEESS
     .depend        list of dependencies
     Makefile       list of dependencies
     makefile       list of dependencies
     sys.mk         system makefile
     /usr/share/mk  system makefile directory

SSEEEE AALLSSOO
     mkdep(1)

HHIISSTTOORRYY
     bbmmaakkee is derived from NetBSD's make(1).  It uses autoconf to facilitate
     portability to other platforms.

NetBSD 1.6_RC1                 November 26, 2002                            12
